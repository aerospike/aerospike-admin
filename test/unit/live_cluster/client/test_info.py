# Copyright 2021-2023 Aerospike, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import warnings
import unittest

with warnings.catch_warnings():
    warnings.filterwarnings("ignore", category=DeprecationWarning)
    import asynctest

from pytest import PytestUnraisableExceptionWarning
from mock.mock import AsyncMock
from mock import Mock
from socket import error as SocketError


from lib.utils.constants import AuthMode
from lib.live_cluster.client.info import (
    ASPrivilege,
    ASResponse,
    add_privileges,
    authenticate_new,
    change_password,
    create_role,
    create_user,
    delete_privileges,
    delete_role,
    delete_whitelist,
    drop_user,
    grant_roles,
    login,
    query_roles,
    query_users,
    revoke_roles,
    set_password,
    set_quotas,
    set_whitelist,
)


class ASPrivilegeTest(unittest.TestCase):
    def test_str_to_enum(self):
        self.assertEqual(ASPrivilege.str_to_enum("USER-admin"), ASPrivilege.USER_ADMIN)
        self.assertEqual(ASPrivilege.str_to_enum("sys_ADMIN"), ASPrivilege.SYS_ADMIN)
        self.assertEqual(ASPrivilege.str_to_enum(""), ASPrivilege.ERROR)
        self.assertEqual(ASPrivilege.str_to_enum("read"), ASPrivilege.READ)
        self.assertEqual(
            ASPrivilege.str_to_enum("read_write_udf"), ASPrivilege.READ_WRITE_UDF
        )

    def test_is_global_only_scope(self):
        self.assertTrue(ASPrivilege.is_global_only_scope(ASPrivilege.DATA_ADMIN))
        self.assertTrue(ASPrivilege.is_global_only_scope(ASPrivilege.SYS_ADMIN))
        self.assertTrue(ASPrivilege.is_global_only_scope(ASPrivilege.UDF_ADMIN))
        self.assertTrue(ASPrivilege.is_global_only_scope(ASPrivilege.USER_ADMIN))
        self.assertTrue(ASPrivilege.is_global_only_scope(ASPrivilege.SINDEX_ADMIN))
        self.assertFalse(ASPrivilege.is_global_only_scope(ASPrivilege.READ))
        self.assertFalse(ASPrivilege.is_global_only_scope(ASPrivilege.READ_WRITE_UDF))
        self.assertFalse(ASPrivilege.is_global_only_scope(ASPrivilege.READ_WRITE))
        self.assertFalse(ASPrivilege.is_global_only_scope(ASPrivilege.TRUNCATE))

    def test__str__(self):
        self.assertEqual(str(ASPrivilege.SYS_ADMIN), "sys-admin")
        self.assertEqual(str(ASPrivilege.DATA_ADMIN), "data-admin")
        self.assertEqual(str(ASPrivilege.USER_ADMIN), "user-admin")
        self.assertEqual(str(ASPrivilege.UDF_ADMIN), "udf-admin")
        self.assertEqual(str(ASPrivilege.SINDEX_ADMIN), "sindex-admin")
        self.assertEqual(str(ASPrivilege.READ_WRITE_UDF), "read-write-udf")
        self.assertEqual(str(ASPrivilege.READ), "read")
        self.assertEqual(str(ASPrivilege.WRITE), "write")
        self.assertEqual(str(ASPrivilege.TRUNCATE), "truncate")


class ASResponseTest(unittest.TestCase):
    def test__str__(self):
        self.assertEqual(str(ASResponse.UNKNOWN_SERVER_ERROR), "Unknown server error")
        self.assertEqual(
            str(ASResponse.NO_USER_OR_UNRECOGNIZED_USER), "No user or unrecognized user"
        )
        self.assertEqual(
            str(ASResponse.NO_CREDENTIAL_OR_BAD_CREDENTIAL),
            "No credential or bad credential",
        )
        self.assertEqual(str(ASResponse.NOT_WHITELISTED), "Not whitelisted")
        self.assertEqual(str(ASResponse.OK), "Ok")


"""
These tests were generated by capturing values send and received from the server.
Of course this only works if units are written correctly and that might not
be the case.  Instead these are here to help reassure a developer that any
refactoring that they have made had not broken anything new.
"""


@asynctest.fail_on(active_handles=True)
class SecurityTest(asynctest.TestCase):
    def setUp(self) -> None:
        warnings.filterwarnings("error", category=RuntimeWarning)
        warnings.filterwarnings("error", category=PytestUnraisableExceptionWarning)
        # self.reader_mock, self.writer_mock = Mock()
        self.reader_mock = AsyncMock()
        self.writer_mock = Mock()
        self.writer_mock.drain = AsyncMock()

    async def test_login_ok(self):
        expected_send_buf = b"\x00\x02\x00\x00\x00\x00\x00[\x00\x00\x14\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00admin\x00\x00\x00=\x03$2a$10$7EqJtq98hPqEX7fNZaFWoO1mVO/4MLpGzsqojz6E9Gef6iXDjXdDa"
        self.reader_mock.read.side_effect = [
            b"\x02\x02\x00\x00\x00\x00\x00R\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
            b"\x00\x00\x00>\x05B$2a$10$7EqJtq98hPqEX7fNZaFWoO1mVO/4MLpGzsqojz6E9Gef6iXDjXdDa",
        ]
        expected = (
            ASResponse.OK,
            b"B$2a$10$7EqJtq98hPqEX7fNZaFWoO1mVO/4MLpGzsqojz6E9Gef6iXDjXdDa",
            0,
        )

        actual = await login(
            self.reader_mock, self.writer_mock, "admin", "admin", AuthMode.INTERNAL
        )

        self.writer_mock.write.assert_called_with(expected_send_buf)
        self.assertTupleEqual(actual, expected)

    async def test_authenticate_new(self):
        expected_send_buf = b"\x00\x02\x00\x00\x00\x00\x00\\\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00admin\x00\x00\x00>\x05B$2a$10$7EqJtq98hPqEX7fNZaFWoO1mVO/4MLpGzsqojz6E9Gef6iXDjXdDa"
        self.reader_mock.read.return_value = b"\x02\x02\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        expected_return_code = ASResponse.OK

        actual_return_code = await authenticate_new(
            self.reader_mock,
            self.writer_mock,
            "admin",
            b"B$2a$10$7EqJtq98hPqEX7fNZaFWoO1mVO/4MLpGzsqojz6E9Gef6iXDjXdDa",
            AuthMode.INTERNAL,
        )

        self.writer_mock.write.assert_called_with(expected_send_buf)
        self.assertEqual(actual_return_code, expected_return_code)

    async def test_create_user_with_roles(self):
        expected_send_buf = b"\x00\x02\x00\x00\x00\x00\x00p\x00\x00\x01\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00bob\x00\x00\x00=\x01$2a$10$7EqJtq98hPqEX7fNZaFWoOv0hwU68nwGK8WvAqb5nnU0s/92caKv6\x00\x00\x00\x13\n\x02\nuser-admin\x05write"
        self.reader_mock.read.return_value = b"\x02\x02\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        expected_return_code = ASResponse.OK

        actual_return_code = await create_user(
            self.reader_mock, self.writer_mock, "bob", "pass", ["user-admin", "write"]
        )

        self.writer_mock.write.assert_called_with(expected_send_buf)
        self.assertEqual(actual_return_code, expected_return_code)

    async def test_create_user_no_roles(self):
        expected_send_buf = b"\x00\x02\x00\x00\x00\x00\x00`\x00\x00\x01\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00nick\x00\x00\x00=\x01$2a$10$7EqJtq98hPqEX7fNZaFWoOv0hwU68nwGK8WvAqb5nnU0s/92caKv6\x00\x00\x00\x02\n\x00"
        self.reader_mock.read.return_value = b"\x02\x02\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        expected_return_code = ASResponse.OK

        actual_return_code = await create_user(
            self.reader_mock, self.writer_mock, "nick", "pass", []
        )

        self.writer_mock.write.assert_called_with(expected_send_buf)
        self.assertEqual(actual_return_code, expected_return_code)

    async def test_create_user_exception(self):
        self.writer_mock.write.side_effect = SocketError("message")

        await self.assertAsyncRaises(
            IOError, create_user(self.reader_mock, self.writer_mock, "nick", "pass", [])
        )

    async def test_drop_user_ok(self):
        expected_send_buf = b"\x00\x02\x00\x00\x00\x00\x00\x18\x00\x00\x02\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00bob"
        self.reader_mock.read.return_value = b"\x02\x02\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        expected_return_code = ASResponse.OK

        actual_return_code = await drop_user(self.reader_mock, self.writer_mock, "bob")

        self.writer_mock.write.assert_called_with(expected_send_buf)
        self.assertEqual(actual_return_code, expected_return_code)

    async def test_drop_user_error(self):
        expected_send_buf = b"\x00\x02\x00\x00\x00\x00\x00\x18\x00\x00\x02\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00bob"
        self.reader_mock.read.return_value = b"\x02\x02\x00\x00\x00\x00\x00\x10\x00<\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        expected_return_code = ASResponse.NO_USER_OR_UNRECOGNIZED_USER

        actual_return_code = await drop_user(self.reader_mock, self.writer_mock, "bob")

        self.writer_mock.write.assert_called_with(expected_send_buf)
        self.assertEqual(actual_return_code, expected_return_code)

    async def test_drop_user_exception(self):
        self.writer_mock.write.side_effect = SocketError("message")

        await self.assertAsyncRaises(
            IOError, drop_user(self.reader_mock, self.writer_mock, "nick")
        )

    async def test_set_password_ok(self):
        expected_send_buf = b"\x00\x02\x00\x00\x00\x00\x00\\\x00\x00\x03\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x00George\x00\x00\x00=\x01$2a$10$7EqJtq98hPqEX7fNZaFWoOo55z4.5EHedKkIBS22sgiJDvgvldAGm"
        self.reader_mock.read.return_value = b"\x02\x02\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        expected_return_code = ASResponse.OK

        actual_return_code = await set_password(
            self.reader_mock, self.writer_mock, "George", "a"
        )

        self.writer_mock.write.assert_called_with(expected_send_buf)
        self.assertEqual(actual_return_code, expected_return_code)

    async def test_set_password_exception(self):
        self.writer_mock.write.side_effect = SocketError("message")

        await self.assertAsyncRaises(
            IOError, set_password(self.reader_mock, self.writer_mock, "bob", "a")
        )

    async def test_change_password_ok(self):
        expected_send_buf = b"\x00\x02\x00\x00\x00\x00\x00\x9d\x00\x00\x04\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x00George\x00\x00\x00=\x02$2a$10$7EqJtq98hPqEX7fNZaFWoObi7T3EgttdiPRlkqhOALhpE/VOPU7Oi\x00\x00\x00=\x01$2a$10$7EqJtq98hPqEX7fNZaFWoOMUpJ9.8mF3fu.DNqcXCqdekYy8261c6"
        self.reader_mock.read.return_value = b"\x02\x02\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        expected_return_code = ASResponse.OK

        actual_return_code = await change_password(
            self.reader_mock, self.writer_mock, "George", "b", "z"
        )

        self.writer_mock.write.assert_called_with(expected_send_buf)
        self.assertEqual(actual_return_code, expected_return_code)

    async def test_change_password_exception(self):
        self.writer_mock.write.side_effect = SocketError("message")

        await self.assertAsyncRaises(
            IOError,
            change_password(self.reader_mock, self.writer_mock, "bob", "a", "z"),
        )

    async def test_grant_roles_ok(self):
        expected_send_buf = b"\x00\x02\x00\x00\x00\x00\x00<\x00\x00\x05\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x00George\x00\x00\x00\x1d\n\x03\nuser-admin\tsys-admin\x05write"
        self.reader_mock.read.return_value = b"\x02\x02\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        expected_return_code = ASResponse.OK

        actual_return_code = await grant_roles(
            self.reader_mock,
            self.writer_mock,
            "George",
            ["user-admin", "sys-admin", "write"],
        )

        self.writer_mock.write.assert_called_with(expected_send_buf)
        self.assertEqual(actual_return_code, expected_return_code)

    async def test_grant_roles_exception(self):
        self.writer_mock.write.side_effect = SocketError("message")

        await self.assertAsyncRaises(
            IOError,
            grant_roles(
                self.reader_mock,
                self.writer_mock,
                "George",
                ["user-admin", "sys-admin", "write"],
            ),
        )

    async def test_revoke_roles_ok(self):
        expected_send_buf = b"\x00\x02\x00\x00\x00\x00\x00<\x00\x00\x06\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x00George\x00\x00\x00\x1d\n\x03\nuser-admin\tsys-admin\x05write"
        self.reader_mock.read.return_value = b"\x02\x02\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        expected_return_code = ASResponse.OK

        actual_return_code = await revoke_roles(
            self.reader_mock,
            self.writer_mock,
            "George",
            ["user-admin", "sys-admin", "write"],
        )

        self.writer_mock.write.assert_called_with(expected_send_buf)
        self.assertEqual(actual_return_code, expected_return_code)

    async def test_revoke_roles_exception(self):
        self.writer_mock.write.side_effect = SocketError("message")

        await self.assertAsyncRaises(
            IOError,
            revoke_roles(
                self.reader_mock,
                self.writer_mock,
                "George",
                ["user-admin", "sys-admin", "write"],
            ),
        )

    async def test_query_users_ok(self):
        expected_send_buf = b"\x00\x02\x00\x00\x00\x00\x00\x10\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        self.reader_mock.read.side_effect = [
            b"\x02\x02\x00\x00\x00\x00\x07\x04",
            b"\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00admin\x00\x00\x00\r\n\x01\nuser-admin\x00\x00\x00\x05\x12\xff\xff\xfc\xaa\x00\x00\x00\x12\x10\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x11\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x00alpha-reader\x00\x00\x00\x0f\n\x01\x0calpha-reader\x00\x00\x00\x05\x12\x00\x00\x00\x00\x00\x00\x00\x12\x10\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x11\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x00alpha-writer\x00\x00\x00\x0f\n\x01\x0calpha-writer\x00\x00\x00\x05\x12\x00\x00\x00\x00\x00\x00\x00\x12\x10\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x11\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00beta-reader\x00\x00\x00\x0e\n\x01\x0bbeta-reader\x00\x00\x00\x05\x12\x00\x00\x00\x00\x00\x00\x00\x12\x10\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x11\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00beta-writer\x00\x00\x00\x0e\n\x01\x0bbeta-writer\x00\x00\x00\x05\x12\x00\x00\x00\x00\x00\x00\x00\x12\x10\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x11\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x00delta-reader\x00\x00\x00\x0f\n\x01\x0cdelta-reader\x00\x00\x00\x05\x12\x00\x00\x00\x00\x00\x00\x00\x12\x10\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x11\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x00delta-writer\x00\x00\x00\x0f\n\x01\x0cdelta-writer\x00\x00\x00\x05\x12\x00\x00\x00\x00\x00\x00\x00\x12\x10\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x11\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00demo-reader\x00\x00\x00\x0e\n\x01\x0bdemo-reader\x00\x00\x00\x05\x12\x00\x00\x00\x00\x00\x00\x00\x12\x10\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x11\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00demo-writer\x00\x00\x00\x0e\n\x01\x0bdemo-writer\x00\x00\x00\x05\x12\x00\x00\x00\x00\x00\x00\x00\x12\x10\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x11\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x00gamma-reader\x00\x00\x00\x0f\n\x01\x0cgamma-reader\x00\x00\x00\x05\x12\x00\x00\x00\x00\x00\x00\x00\x12\x10\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x11\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x00gamma-writer\x00\x00\x00\x0f\n\x01\x0cgamma-writer\x00\x00\x00\x05\x12\x00\x00\x00\x00\x00\x00\x00\x12\x10\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x11\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x00omega-reader\x00\x00\x004\n\x04\x0calpha-reader\x0bbeta-reader\x0bdemo-reader\x0cgamma-reader\x00\x00\x00\x05\x12\x00\x00\x00\x00\x00\x00\x00\x12\x10\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x11\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x00omega-writer\x00\x00\x004\n\x04\x0calpha-writer\x0bbeta-writer\x0bdemo-writer\x0cgamma-writer\x00\x00\x00\x05\x12\x00\x00\x00\x00\x00\x00\x00\x12\x10\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x11\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x00reader\x00\x00\x00\t\n\x01\x06reader\x00\x00\x00\x05\x12\x00\x00\x00\x00\x00\x00\x00\x12\x10\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x11\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00root\x00\x00\x00\x07\n\x01\x04root\x00\x00\x00\x05\x12\x00\x00\x00\x00\x00\x00\x00\x12\x10\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x11\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00superuser\x00\x00\x00\x0c\n\x01\tsuperuser\x00\x00\x00\x05\x12\x00\x00\x00\x00\x00\x00\x00\x12\x10\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x11\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x00writer\x00\x00\x00\t\n\x01\x06writer\x00\x00\x00\x05\x12\xff\xff\xff(\x00\x00\x00\x12\x10\x04\x00\x00\x0f\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x11\x04\x00\x00\x0f\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
            b"\x02\x02\x00\x00\x00\x00\x00\x10",
            b"\x002\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
        ]
        expected_users = {
            "admin": {
                "roles": ["user-admin"],
                "read-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
                "write-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
                "connections": 4294966442,
            },
            "alpha-reader": {
                "roles": ["alpha-reader"],
                "read-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
                "write-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
            },
            "alpha-writer": {
                "roles": ["alpha-writer"],
                "read-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
                "write-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
            },
            "beta-reader": {
                "roles": ["beta-reader"],
                "read-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
                "write-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
            },
            "beta-writer": {
                "roles": ["beta-writer"],
                "read-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
                "write-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
            },
            "delta-reader": {
                "roles": ["delta-reader"],
                "read-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
                "write-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
            },
            "delta-writer": {
                "roles": ["delta-writer"],
                "read-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
                "write-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
            },
            "demo-reader": {
                "roles": ["demo-reader"],
                "read-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
                "write-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
            },
            "demo-writer": {
                "roles": ["demo-writer"],
                "read-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
                "write-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
            },
            "gamma-reader": {
                "roles": ["gamma-reader"],
                "read-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
                "write-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
            },
            "gamma-writer": {
                "roles": ["gamma-writer"],
                "read-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
                "write-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
            },
            "omega-reader": {
                "roles": ["alpha-reader", "beta-reader", "demo-reader", "gamma-reader"],
                "read-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
                "write-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
            },
            "omega-writer": {
                "roles": ["alpha-writer", "beta-writer", "demo-writer", "gamma-writer"],
                "read-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
                "write-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
            },
            "reader": {
                "roles": ["reader"],
                "read-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
                "write-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
            },
            "root": {
                "roles": ["root"],
                "read-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
                "write-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
            },
            "superuser": {
                "roles": ["superuser"],
                "read-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
                "write-info": {
                    "quota": 0,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
            },
            "writer": {
                "roles": ["writer"],
                "read-info": {
                    "quota": 4000,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
                "write-info": {
                    "quota": 4000,
                    "single-record-tps": 0,
                    "scan-query-rps-limited": 0,
                    "scan-query-limitless": 0,
                },
                "connections": 4294967080,
            },
        }
        expected_return_code = ASResponse.OK

        actual_return_code, actual_users = await query_users(
            self.reader_mock, self.writer_mock
        )

        self.writer_mock.write.assert_called_with(expected_send_buf)
        self.assertEqual(actual_return_code, expected_return_code)
        self.assertDictEqual(actual_users, expected_users)

    async def test_query_users_exception(self):
        self.writer_mock.write.side_effect = SocketError("message")

        await self.assertAsyncRaises(
            IOError, query_users(self.reader_mock, self.writer_mock)
        )

    async def test_create_role_with_scoped_priv(self):
        expected_send_buf = b"\x00\x02\x00\x00\x00\x00\x002\x00\x00\n\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x0btest-role\x00\x00\x00\x10\x0c\x01\r\x04test\x07testset"
        self.reader_mock.read.return_value = b"\x02\x02\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        expected_return_code = ASResponse.OK

        actual_return_code = await create_role(
            self.reader_mock, self.writer_mock, "test-role", ["write.test.testset"]
        )

        self.writer_mock.write.assert_called_with(expected_send_buf)
        self.assertEqual(actual_return_code, expected_return_code)

    async def test_create_role_with_scoped_priv_and_allowlist(self):
        expected_send_buf = b"\x00\x02\x00\x00\x00\x00\x006\x00\x00\n\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x0bb\x00\x00\x00\x10\x0c\x01\n\x04test\x07testset\x00\x00\x00\x08\r3.3.3.3"
        self.reader_mock.read.return_value = b"\x02\x02\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        expected_return_code = ASResponse.OK

        actual_return_code = await create_role(
            self.reader_mock, self.writer_mock, "b", ["read.test.testset"], ["3.3.3.3"]
        )

        self.writer_mock.write.assert_called_with(expected_send_buf)
        self.assertEqual(actual_return_code, expected_return_code)

    async def test_create_role_with_global_priv(self):
        expected_send_buf = b"\x00\x02\x00\x00\x00\x00\x00\x1f\x00\x00\n\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x0ba\x00\x00\x00\x05\x0c\x01\n\x00\x00"
        self.reader_mock.read.return_value = b"\x02\x02\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        expected_return_code = ASResponse.OK

        actual_return_code = await create_role(
            self.reader_mock, self.writer_mock, "a", ["read"]
        )

        self.writer_mock.write.assert_called_with(expected_send_buf)
        self.assertEqual(actual_return_code, expected_return_code)

    async def test_create_role_with_priv_and_quotas(self):
        expected_send_buf = b"\x00\x02\x00\x00\x00\x00\x004\x00\x00\n\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x0by-role\x00\x00\x00\x03\x0c\x01\x01\x00\x00\x00\x05\x0e\x00\x00\x00o\x00\x00\x00\x05\x0f\x00\x00\x00\xde"
        self.reader_mock.read.return_value = b"\x02\x02\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        expected_return_code = ASResponse.OK

        actual_return_code = await create_role(
            self.reader_mock,
            self.writer_mock,
            "y-role",
            ["sys-admin"],
            read_quota=111,
            write_quota=222,
        )

        self.writer_mock.write.assert_called_with(expected_send_buf)
        self.assertEqual(actual_return_code, expected_return_code)

        expected_send_buf = b"\x00\x02\x00\x00\x00\x00\x00+\x00\x00\n\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x0by-role\x00\x00\x00\x03\x0c\x01\x01\x00\x00\x00\x05\x0e\x00\x00\x00o"
        self.reader_mock.read.return_value = b"\x02\x02\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        expected_return_code = ASResponse.OK

        actual_return_code = await create_role(
            self.reader_mock, self.writer_mock, "y-role", ["sys-admin"], read_quota=111
        )

        self.writer_mock.write.assert_called_with(expected_send_buf)
        self.assertEqual(actual_return_code, expected_return_code)

        expected_send_buf = b"\x00\x02\x00\x00\x00\x00\x00+\x00\x00\n\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x0by-role\x00\x00\x00\x03\x0c\x01\x01\x00\x00\x00\x05\x0f\x00\x00\x00\xde"
        self.reader_mock.read.return_value = b"\x02\x02\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        expected_return_code = ASResponse.OK

        actual_return_code = await create_role(
            self.reader_mock, self.writer_mock, "y-role", ["sys-admin"], write_quota=222
        )

        self.writer_mock.write.assert_called_with(expected_send_buf)
        self.assertEqual(actual_return_code, expected_return_code)

    async def test_create_role_with_scoped_priv_and_allowlist_and_quotas(self):
        expected_send_buf = b"\x00\x02\x00\x00\x00\x00\x00O\x00\x00\n\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\t\x0bthe-role\x00\x00\x00\x10\x0c\x01\n\x04test\x07testset\x00\x00\x00\x08\r3.3.3.3\x00\x00\x00\x05\x0e\x00\x00\x00o\x00\x00\x00\x05\x0f\x00\x00\x00\xde"
        self.reader_mock.read.return_value = b"\x02\x02\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        expected_return_code = ASResponse.OK

        actual_return_code = await create_role(
            self.reader_mock,
            self.writer_mock,
            "the-role",
            ["read.test.testset"],
            ["3.3.3.3"],
            111,
            222,
        )

        self.writer_mock.write.assert_called_with(expected_send_buf)
        self.assertEqual(actual_return_code, expected_return_code)

    async def test_create_role_error(self):
        expected_send_buf = b"\x00\x02\x00\x00\x00\x00\x00'\x00\x00\n\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x0btest-role\x00\x00\x00\x05\x0c\x01\xff\x00\x00"
        self.reader_mock.read.return_value = b"\x02\x02\x00\x00\x00\x00\x00\x10\x00G\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        expected_return_code = ASResponse.ROLE_ALREADY_EXISTS

        actual_return_code = await create_role(
            self.reader_mock, self.writer_mock, "test-role", ["not-priv"]
        )

        self.writer_mock.write.assert_called_with(expected_send_buf)
        self.assertEqual(actual_return_code, expected_return_code)

    async def test_create_role_exception(self):
        self.writer_mock.write.side_effect = SocketError("message")

        await self.assertAsyncRaises(
            IOError,
            create_role(
                self.reader_mock, self.writer_mock, "test-role", ["write.test.testset"]
            ),
        )

    async def test_delete_role_ok(self):
        expected_send_buf = b"\x00\x02\x00\x00\x00\x00\x00\x1e\x00\x00\x0b\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x0btest-role"
        self.reader_mock.read.return_value = b"\x02\x02\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        expected_return_code = ASResponse.OK

        actual_return_code = await delete_role(
            self.reader_mock, self.writer_mock, "test-role"
        )

        self.writer_mock.write.assert_called_with(expected_send_buf)
        self.assertEqual(actual_return_code, expected_return_code)

    async def test_delete_role_exception(self):
        self.writer_mock.write.side_effect = SocketError("message")

        await self.assertAsyncRaises(
            IOError, delete_role(self.reader_mock, self.writer_mock, "test-role")
        )

    async def test_add_privileges_ok(self):
        expected_send_buf = b"\x00\x02\x00\x00\x00\x00\x002\x00\x00\x0c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x0btest-role\x00\x00\x00\x10\x0c\x01\n\x04test\x07testset"
        self.reader_mock.read.return_value = b"\x02\x02\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        expected_return_code = ASResponse.OK

        actual_return_code = await add_privileges(
            self.reader_mock, self.writer_mock, "test-role", ["read.test.testset"]
        )

        self.writer_mock.write.assert_called_with(expected_send_buf)
        self.assertEqual(actual_return_code, expected_return_code)

    async def test_add_privileges_exception(self):
        self.writer_mock.write.side_effect = SocketError("message")

        await self.assertAsyncRaises(
            IOError,
            add_privileges(self.reader_mock, self.writer_mock, "test-role", "write"),
        )

    async def test_delete_privileges_ok(self):
        expected_send_buf = b"\x00\x02\x00\x00\x00\x00\x002\x00\x00\r\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x0btest-role\x00\x00\x00\x10\x0c\x01\n\x04test\x07testset"
        self.reader_mock.read.return_value = b"\x02\x02\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        expected_return_code = ASResponse.OK

        actual_return_code = await delete_privileges(
            self.reader_mock, self.writer_mock, "test-role", ["read.test.testset"]
        )

        self.writer_mock.write.assert_called_with(expected_send_buf)
        self.assertEqual(actual_return_code, expected_return_code)

    async def test_delete_privileges_exception(self):
        self.writer_mock.write.side_effect = SocketError("message")

        await self.assertAsyncRaises(
            IOError,
            delete_privileges(self.reader_mock, self.writer_mock, "test-role", "write"),
        )

    async def test_set_whitelist(self):
        expected_send_buf = b"\x00\x02\x00\x00\x00\x00\x00*\x00\x00\x0e\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x0btest-role\x00\x00\x00\x08\r3.3.3.3"
        self.reader_mock.read.return_value = b"\x02\x02\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        expected_return_code = ASResponse.OK

        actual_return_code = await set_whitelist(
            self.reader_mock, self.writer_mock, "test-role", ["3.3.3.3"]
        )

        self.writer_mock.write.assert_called_with(expected_send_buf)
        self.assertEqual(actual_return_code, expected_return_code)

    async def test_set_whitelist_exception(self):
        self.writer_mock.write.side_effect = SocketError("message")

        await self.assertAsyncRaises(
            IOError,
            set_whitelist(self.reader_mock, self.writer_mock, "test-role", ["3.3.3.3"]),
        )

    async def test_delete_whitelist(self):
        expected_send_buf = b"\x00\x02\x00\x00\x00\x00\x00\x1e\x00\x00\x0e\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x0btest-role"
        self.reader_mock.read.return_value = b"\x02\x02\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        expected_return_code = ASResponse.OK

        actual_return_code = await delete_whitelist(
            self.reader_mock, self.writer_mock, "test-role"
        )

        self.writer_mock.write.assert_called_with(expected_send_buf)
        self.assertEqual(actual_return_code, expected_return_code)

    async def test_delete_whitelist_exception(self):
        self.writer_mock.write.side_effect = SocketError("message")

        await self.assertAsyncRaises(
            IOError,
            set_whitelist(self.reader_mock, self.writer_mock, "test-role", ["3.3.3.3"]),
        )

    async def test_set_quotas(self):
        expected_send_buf = b"\x00\x02\x00\x00\x00\x00\x00-\x00\x00\x0f\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x0bwriter\x00\x00\x00\x05\x0e\x00\x00\x00o\x00\x00\x00\x05\x0f\x00\x00\x00\xde"
        self.reader_mock.read.return_value = b"\x02\x02\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        expected_return_code = ASResponse.OK

        actual_return_code = await set_quotas(
            self.reader_mock,
            self.writer_mock,
            "writer",
            read_quota="111",
            write_quota="222",
        )

        self.writer_mock.write.assert_called_with(expected_send_buf)
        self.assertEqual(actual_return_code, expected_return_code)

    async def test_set_quotas_exception(self):
        self.writer_mock.write.side_effect = SocketError("message")

        await self.assertAsyncRaises(
            OSError,
            set_quotas(
                self.reader_mock,
                self.writer_mock,
                "test-role",
                read_quota="111",
                write_quota="222",
            ),
        )

    # Currently not in use and that is why there is not test yet since we record
    # input/output on the buffer.
    # async async def test_delete_quotas(self)

    async def test_query_roles_ok(self):
        expected_send_buf = b"\x00\x02\x00\x00\x00\x00\x00\x10\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        self.reader_mock.read.side_effect = [
            b"\x02\x02\x00\x00\x00\x00\x03\xef",
            b"\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x0balpha-reader\x00\x00\x00\x0e\x0c\x01\n\x04test\x05alpha\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x0balpha-writer\x00\x00\x00\x0e\x0c\x01\x0b\x04test\x05alpha\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x0bbeta-reader\x00\x00\x00\r\x0c\x01\n\x04test\x04beta\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x0bbeta-writer\x00\x00\x00\r\x0c\x01\x0b\x04test\x04beta\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x0bdata-admin\x00\x00\x00\x03\x0c\x01\x02\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x0bdelta-reader\x00\x00\x000\x0c\x04\n\x04test\x05alpha\n\x04test\x04beta\n\x04test\x04demo\n\x04test\x05gamma\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x0bdelta-writer\x00\x00\x000\x0c\x04\x0b\x04test\x05alpha\x0b\x04test\x04beta\x0b\x04test\x04demo\x0b\x04test\x05gamma\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x0bdemo-reader\x00\x00\x00\r\x0c\x01\n\x04test\x04demo\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x0bdemo-writer\x00\x00\x00\r\x0c\x01\x0b\x04test\x04demo\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x0bgamma-reader\x00\x00\x00\x0e\x0c\x01\n\x04test\x05gamma\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x0bgamma-writer\x00\x00\x00\x0e\x0c\x01\x0b\x04test\x05gamma\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x0bread\x00\x00\x00\x05\x0c\x01\n\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x0bread-write\x00\x00\x00\x05\x0c\x01\x0b\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x0bread-write-udf\x00\x00\x00\x05\x0c\x01\x0c\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x0breader\x00\x00\x00\x05\x0c\x01\n\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x0broot\x00\x00\x00\x08\x0c\x04\x00\x01\x02\x0b\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x0bsuperuser\x00\x00\x00\x08\x0c\x04\x00\x01\x02\x0c\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x0bsys-admin\x00\x00\x00\x03\x0c\x01\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x0buser-admin\x00\x00\x00\x03\x0c\x01\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x0bwrite\x00\x00\x00\x05\x0c\x01\r\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x0bwriter\x00\x00\x00\x05\x0e\x00\x00\x0f\xa0\x00\x00\x00\x05\x0f\x00\x00\x0f\xa0\x00\x00\x00\x07\x0c\x03\x01\x02\x0b\x00\x00",
            b"\x02\x02\x00\x00\x00\x00\x00\x10",
            b"\x002\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
        ]
        expected_roles = {
            "alpha-reader": {"privileges": ["read.test.alpha"], "whitelist": []},
            "alpha-writer": {"privileges": ["read-write.test.alpha"], "whitelist": []},
            "beta-reader": {"privileges": ["read.test.beta"], "whitelist": []},
            "beta-writer": {"privileges": ["read-write.test.beta"], "whitelist": []},
            "data-admin": {"privileges": ["data-admin"], "whitelist": []},
            "delta-reader": {
                "privileges": [
                    "read.test.alpha",
                    "read.test.beta",
                    "read.test.demo",
                    "read.test.gamma",
                ],
                "whitelist": [],
            },
            "delta-writer": {
                "privileges": [
                    "read-write.test.alpha",
                    "read-write.test.beta",
                    "read-write.test.demo",
                    "read-write.test.gamma",
                ],
                "whitelist": [],
            },
            "demo-reader": {"privileges": ["read.test.demo"], "whitelist": []},
            "demo-writer": {"privileges": ["read-write.test.demo"], "whitelist": []},
            "gamma-reader": {"privileges": ["read.test.gamma"], "whitelist": []},
            "gamma-writer": {"privileges": ["read-write.test.gamma"], "whitelist": []},
            "read": {"privileges": ["read"], "whitelist": []},
            "read-write": {"privileges": ["read-write"], "whitelist": []},
            "read-write-udf": {"privileges": ["read-write-udf"], "whitelist": []},
            "reader": {"privileges": ["read"], "whitelist": []},
            "root": {
                "privileges": ["user-admin", "sys-admin", "data-admin", "read-write"],
                "whitelist": [],
            },
            "superuser": {
                "privileges": [
                    "user-admin",
                    "sys-admin",
                    "data-admin",
                    "read-write-udf",
                ],
                "whitelist": [],
            },
            "sys-admin": {"privileges": ["sys-admin"], "whitelist": []},
            "user-admin": {"privileges": ["user-admin"], "whitelist": []},
            "write": {"privileges": ["write"], "whitelist": []},
            "writer": {
                "privileges": ["sys-admin", "data-admin", "read-write"],
                "whitelist": [],
                "read-quota": "4000",
                "write-quota": "4000",
            },
        }
        expected_return_code = ASResponse.OK

        actual_return_code, actual_roles = await query_roles(
            self.reader_mock, self.writer_mock
        )

        self.writer_mock.write.assert_called_with(expected_send_buf)
        self.assertEqual(actual_return_code, expected_return_code)
        self.assertDictEqual(actual_roles, expected_roles)

    async def test_query_roles_exception(self):
        self.writer_mock.write.side_effect = SocketError("message")

        await self.assertAsyncRaises(
            IOError, query_roles(self.reader_mock, self.writer_mock)
        )
